// Generated using Sourcery 1.8.1 — https://github.com/krzysztofzablocki/Sourcery
// DO NOT EDIT
// 💙💙 Autogenerated for saving Beegees time ⏰
// swiftlint:disable all

@testable import FooApp
import Foundation

final class CalculatorSpy: Calculator {
    // MARK: - add
    var closureAdd: () -> () = {}
    var invokedAdd = false
    var invokedAddCount = 0
    var invokedAddParameters: (n1: Decimal, n2: Decimal)?
    var invokedAddParametersList = [(n1: Decimal, n2: Decimal)]()
    var stubbedAddResult: Decimal!

    func add(n1: Decimal, n2: Decimal) -> Decimal {
        invokedAdd = true
        invokedAddCount += 1
        invokedAddParameters = (n1, n2)
        invokedAddParametersList.append((n1, n2))
        closureAdd()
        return stubbedAddResult
    }
    // MARK: - multiply
    var closureMultiply: () -> () = {}
    var invokedMultiply = false
    var invokedMultiplyCount = 0
    var invokedMultiplyParameters: (n1: Decimal, n2: Decimal)?
    var invokedMultiplyParametersList = [(n1: Decimal, n2: Decimal)]()
    var stubbedMultiplyResult: Decimal!

    func multiply(n1: Decimal, n2: Decimal) -> Decimal {
        invokedMultiply = true
        invokedMultiplyCount += 1
        invokedMultiplyParameters = (n1, n2)
        invokedMultiplyParametersList.append((n1, n2))
        closureMultiply()
        return stubbedMultiplyResult
    }
    // MARK: - divide
    var divideN1N2ThrowableError: Error?
    var closureDivide: () -> () = {}
    var invokedDivide = false
    var invokedDivideCount = 0
    var invokedDivideParameters: (n1: Decimal, n2: Decimal)?
    var invokedDivideParametersList = [(n1: Decimal, n2: Decimal)]()
    var stubbedDivideResult: Decimal!

    func divide(n1: Decimal, n2: Decimal) throws -> Decimal {
        invokedDivide = true
        invokedDivideCount += 1
        invokedDivideParameters = (n1, n2)
        invokedDivideParametersList.append((n1, n2))
        if let error = divideN1N2ThrowableError {
            throw error
        }
        closureDivide()
        return stubbedDivideResult
    }
    // MARK: - calculateADifficultProblem
    var closureCalculateADifficultProblem: () -> () = {}
    var invokedCalculateADifficultProblem = false
    var invokedCalculateADifficultProblemCount = 0
    var invokedCalculateADifficultProblemParameters: (data: [Double], Void)?
    var invokedCalculateADifficultProblemParametersList = [(data: [Double], Void)]()
    var stubbedCalculateADifficultProblemResult: Decimal!

    func calculateADifficultProblem(data: [Double]) async -> Decimal {
        invokedCalculateADifficultProblem = true
        invokedCalculateADifficultProblemCount += 1
        invokedCalculateADifficultProblemParameters = (data, ())
        invokedCalculateADifficultProblemParametersList.append((data, ()))
        closureCalculateADifficultProblem()
        return stubbedCalculateADifficultProblemResult
    }
}
